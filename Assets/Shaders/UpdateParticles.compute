#pragma kernel SolveCollisions
#pragma kernel ApplyGravity

struct Particle {
    float2 position;
    float2 previousPosition;
    float2 velocity;
};
struct Obstacle {
    int type;
    float2 position;
    float2 size;
    float2x2 rotation;
};

StructuredBuffer<Particle> _ReadParticles;
RWStructuredBuffer<Particle> _WriteParticles;
StructuredBuffer<Obstacle> _Obstacles;

float deltaTime;
float radius;
float dampingFactor;
float penetrationFactor;
float2 bounds;
int obstacleCount;

void HandleBoundsCollision(inout Particle p)
{
    if (p.position.x < -bounds.x + radius) {
        p.position.x = -bounds.x + radius;
        p.velocity.x = -p.velocity.x * dampingFactor;
    }
    if (p.position.x > bounds.x - radius) {
        p.position.x = bounds.x - radius;
        p.velocity.x = -p.velocity.x * dampingFactor;
    }
    if (p.position.y < -bounds.y + radius) {
        p.position.y = -bounds.y + radius;
        p.velocity.y = -p.velocity.y * dampingFactor;
    }
    if (p.position.y > bounds.y - radius) {
        p.position.y = bounds.y - radius;
        p.velocity.y = -p.velocity.y * dampingFactor;
    }
}

void HandleParticleCollisions(inout Particle p, uint i)
{
    for (uint j = 0; j < _ReadParticles.Length; j++) {
        if (i == j) continue;

        Particle q = _ReadParticles[j];
        float2 delta = p.position - q.position;
        float dist = length(delta);
        float minDist = 2.0 * radius;

        if (dist < minDist && dist > 0.0001) {
            float2 normal = delta / dist;
            float2 relVel = p.velocity - q.velocity;

            if (dot(relVel, normal) < 0) {
                float2 impulse = normal * dot(-relVel, normal) / 2.0;
                p.velocity += impulse;

                float2 normalVel = dot(p.velocity, normal) * normal;
                float2 tangentialVel = p.velocity - normalVel;
                normalVel *= dampingFactor;
                p.velocity = normalVel + tangentialVel;
            }

            float penetration = minDist - dist;
            p.position += penetrationFactor * normal * penetration;
        }
    }
}

void HandleObstacleCollisions(inout Particle p)
{
    for (int k = 0; k < obstacleCount; k++) {
        Obstacle obs = _Obstacles[k];

        if (obs.type == 0) {
            // Circle
            float2 delta = p.position - obs.position;
            float dist = length(delta);
            float combinedRadius = radius + obs.size.x;

            if (dist < combinedRadius && dist > 0.001) {
                float2 normal = delta / dist;
                float penetration = combinedRadius - dist;
                p.position += normal * (penetration + 1e-4);

                float2 normalVel = dot(p.velocity, normal) * normal;
                float2 tangentialVel = p.velocity - normalVel;
                normalVel *= -dampingFactor;
                p.velocity = normalVel + tangentialVel;
            }
        }
        else if (obs.type == 1) {
            // Rectangle
            float2x2 rotT = float2x2(
                obs.rotation[0].x, obs.rotation[1].x,
                obs.rotation[0].y, obs.rotation[1].y
            );

            float2 localPos = mul(rotT, p.position - obs.position);
            float2 clamped = clamp(localPos, -obs.size, obs.size);
            float2 delta = localPos - clamped;
            float dist = length(delta);

            if (dist < radius && dist > 0.001) {
                float2 normalLocal = delta / dist;
                float2 normalWorld = mul(obs.rotation, normalLocal);
                float penetration = radius - dist;
                p.position += normalWorld * (penetration + 1e-4);

                float2 normalVel = dot(p.velocity, normalWorld) * normalWorld;
                float2 tangentialVel = p.velocity - normalVel;
                normalVel *= -dampingFactor;
                p.velocity = normalVel + tangentialVel;
            }
        }
    }
}

[numthreads(64, 1, 1)]
void SolveCollisions(uint3 id : SV_DispatchThreadID)
{
    uint i = id.x;
    if (i >= _ReadParticles.Length) return;

    Particle p = _ReadParticles[i];
    
    HandleBoundsCollision(p);
    HandleObstacleCollisions(p);
    HandleParticleCollisions(p, i);

    _WriteParticles[i] = p;
}

float gravity;

[numthreads(64, 1, 1)]
void ApplyGravity (uint3 id : SV_DispatchThreadID)
{
    uint i = id.x;
    if (i >= _ReadParticles.Length) return;

    Particle p = _ReadParticles[i];

    p.velocity.y += gravity * deltaTime;
    p.position += p.velocity * deltaTime;

    _WriteParticles[i] = p;
}
